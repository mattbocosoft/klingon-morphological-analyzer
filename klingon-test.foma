source klingon.foma

# Read in words from file and create automaton
define CorrectWords @txt"words-sonnet18.txt";

# How many predictions are correct:
def TestNumberCorrect CorrectWords & [Grammar .o. CorrectWords].l;

# How many are incorrect:
def TestNumberIncorrect CorrectWords - [Grammar .o. CorrectWords].l;

# TESTS

echo
echo ###################
echo RECALL TEST CASES (Success: >1 States)
echo ###################
echo
echo ~~~~~~~~~~~~~~
echo ~~~ NOUNS ~~~
echo ~~~~~~~~~~~~~~
echo
echo ~# Simple Nouns #~
echo ~~~~~~~~~~~~~~~~~~
regex {DoS[target]}"[SG]""[N]" .o. Grammar .o. {DoS};	! DoS[target][SG][N] -> DoS
regex {QIH[destruction]}"[SG]""[N]" .o. Grammar .o. {QIH};	! QIH[destruction]}[SG][N] -> QIH
echo
echo ~# Verb plus -wI' #~
echo ~~~~~~~~~~~~~~~~~~~~
regex {baHwI'[gunner]}"[SG]""[N]" .o. Grammar .o. {baHwI'};
regex {So'[to-cloak,to-hide]}"[PERSON]""[SG]""[DVN]" .o. Grammar .o. {So'wI'};
echo
echo ~# Other complex nouns #~
echo ~~~~~~~~~~~~~~~~~~~~~~~~~
regex {'ejDo'[starship]}"[SG]""[N]" .o. Grammar .o. {'ejDo'};
regex {'ejyo'[starfleet]}"[SG]""[N]" .o. Grammar .o. {'ejyo'};
echo
echo ~# Suffixes #~
echo ~~~~~~~~~~~~~~
echo
echo Type 1: Augmentative/diminutive
regex {SuS[wind,breeze]}"[AUGMENTATIVE]""[SG]""[N]" .o. Grammar .o. {SuS'a'};
regex {Qagh[mistake]}"[AUGMENTATIVE]""[SG]""[N]" .o. Grammar .o. {Qagh'a'};
regex {woQ[power]}"[AUGMENTATIVE]""[SG]""[N]" .o. Grammar .o. {woQ'a'};
regex {SuS[wind,breeze]}"[DIMINUTIVE]""[SG]""[N]" .o. Grammar .o. {SuSHom};
regex {roj[peace]}"[DIMINUTIVE]""[SG]""[N]" .o. Grammar .o. {rojHom};
echo
echo Type 2: Number
# a noun without a plural suffix may still refer to more than one entity
regex {yaS[officer]}"[SG]""[N]" .o. Grammar .o. {yaS};
regex {yaS[officer]}"[PL]""[N]" .o. Grammar .o. {yaS};
regex {yaS[officer]}"[PL]""[N]" .o. Grammar .o. {yaSpu'};
regex {qam[foot]}"[PL]""[N]" .o. Grammar .o. {qamDu'};
regex {tlhon[nostril]}"[PL]""[N]" .o. Grammar .o. {tlhonDu'};
regex {mID[colony]}"[PL]""[N]" .o. Grammar .o. {mIDmey};
regex {yuQ[planet]}"[PL]""[N]" .o. Grammar .o. {yuQmey};
regex {puq[child,offspring]}"[SG]""[N]" .o. Grammar .o. {puq};
regex {puq[child,offspring]}"[PL]""[N]" .o. Grammar .o. {puqpu'};
regex {puq[child,offspring]}"[PL]""[ALL-OVER-THE-PLACE]""[N]" .o. Grammar .o. {puqmey};
regex {DoS[target]}"[SG]""[N]" .o. Grammar .o. {DoS};
regex {peng[torpedo]}"[SG]""[N]" .o. Grammar .o. {peng};
regex {vIj[thruster]}"[SG]""[N]" .o. Grammar .o. {vIj};
regex {DoS[target]}"[PL]""[ALL-OVER-THE-PLACE]""[N]" .o. Grammar .o. {DoSmey};
regex {peng[torpedo]}"[PL]""[ALL-OVER-THE-PLACE]""[N]" .o. Grammar .o. {pengmey};
echo ---False Positives (Success: 1 State)
regex Grammar .o. {tlhonmey};
regex Grammar .o. {ray'mey};
regex Grammar .o. {chamey};
regex Grammar .o. {chuyDaHmey};
echo
echo Type 3: Qualification
regex {roj[peace]}"[SG]""[SOCALLED]""[N]" .o. Grammar .o. {rojqoq};
regex {Duj[ship,vessel]}"[SG]""[DUBITATIVE]""[N]" .o. Grammar .o. {DujHey};
regex {Duj[ship,vessel]}"[SG]""[ACCURATE]""[N]" .o. Grammar .o. {Dujna'};
echo
echo Type 4: Possession/specification
regex {juH[home,house]}"[SG]""[POSSESSIVE-1P-SG]""[N]" .o. Grammar .o. {juHwIj};
regex {juH[home,house]}"[SG]""[POSSESSIVE-2P-SG]""[N]" .o. Grammar .o. {juHlIj};
regex {juH[home,house]}"[SG]""[POSSESSIVE-3P-PL]""[N]" .o. Grammar .o. {juHchaj};
regex {joH[lord]}"[SG]""[POSSESSIVE-1P-SG]""[N]" .o. Grammar .o. {joHwI'};
regex {puq[child,offspring]}"[SG]""[POSSESSIVE-2P-SG]""[N]" .o. Grammar .o. {puqlI'};
regex {puq[child,offspring]}"[SG]""[POSSESSIVE-2P-SG]""[DEROGATORY]""[N]" .o. Grammar .o. {puqlIj};
regex {joH[lord]}"[SG]""[POSSESSIVE-1P-SG]""[DEROGATORY]""[N]" .o. Grammar .o. {joHwIj};
regex {nuH[weapon]}"[SG]""[THIS]""[N]" .o. Grammar .o. {nuHvam};
regex {yuQ[planet]}"[SG]""[THIS]""[N]" .o. Grammar .o. {yuQvam};
regex {nuH[weapon]}"[PL]""[THIS]""[N]" .o. Grammar .o. {nuHmeyvam};
regex {nuH[weapon]}"[SG]""[THAT]""[N]" .o. Grammar .o. {nuHvetlh};
regex {yuQ[planet]}"[SG]""[THAT]""[N]" .o. Grammar .o. {yuQvetlh};
regex {nuH[weapon]}"[PL]""[THAT]""[N]" .o. Grammar .o. {nuHmeyvetlh};
echo ---False Positives (Success: 1 State)
regex {puq[child,offspring]}"[SG]""[POSSESSIVE-2P-SG]""[N]" .o. Grammar .o. {puqlIj}; ! Requires derogatory tag
echo
echo Type 5: Syntactic markers
regex {pa'[room]}"[SG]""[LOCATIVE]""[N]" .o. Grammar .o. {pa'Daq};
regex {Dung[area-above]}"[SG]""[LOCATIVE]""[N]" .o. Grammar .o. {DungDaq};
regex {pa'[room]}"[SG]""[ABLATIVE]""[N]" .o. Grammar .o. {pa'vo'};
regex {SuS[wind,breeze]}"[SG]""[CAUSAL]""[N]" .o. Grammar .o. {SuSmo'};
regex {Qu'[mission]}"[SG]""[DATIVE]""[N]" .o. Grammar .o. {Qu'vaD};
# Do not Support: regex {jIH[I,me][PRONOUN]}"[SG]""[TOPIC]""[PRONOUN]" .o. Grammar .o. {jIH'e'};
regex {De'[data,information]}"[SG]""[TOPIC]""[N]" .o. Grammar .o. {De''e'};
echo ---False Positives (Success: 1 State)
# "Unlike other nouns, [Location Nouns] are never followed by the locative suffix." - TKD
regex {pa'[there,over-there]}"[SG]""[LOCATIVE]""[N]" .o. Grammar .o. {pa'Daq};
regex {naDev[hereabouts]}"[SG]""[LOCATIVE]""[N]" .o. Grammar .o. {naDevDaq};
regex {Dat[everywhere]}"[SG]""[LOCATIVE]""[N]" .o. Grammar .o. {DatDaq};
echo
echo Multiple Types
regex {Qagh[mistake]}"[DIMINUTIVE]""[PL]""[DUBITATIVE]""[POSSESSIVE-2P-SG]""[CAUSAL]""[N]" .o. Grammar .o. {QaghHommeyHeylIjmo'};
regex {pa'[room]}"[SG]""[POSSESSIVE-1P-SG]""[LOCATIVE]""[N]" .o. Grammar .o. {pa'wIjDaq};
regex {Duy[representative]}"[PL]""[SOCALLED]""[POSSESSIVE-3P-PL]""[N]" .o. Grammar .o. {Duypu'qoqchaj};
regex {qam[foot]}"[PL]""[POSSESSIVE-1P-SG]""[LOCATIVE]""[N]" .o. Grammar .o. {qamDu'wIjDaq};
regex {roj[peace]}"[DIMINUTIVE]""[SG]""[TOPIC]""[N]" .o. Grammar .o. {rojHom'e'};
regex {baHwI'[gunner]}"[PL]""[THIS]""[N]" .o. Grammar .o. {baHwI'pu'vam};
regex {veng[city]}"[DIMINUTIVE]""[PL]""[SOCALLED]""[POSSESSIVE-3P-PL]""[LOCATIVE]""[N]" .o. Grammar .o. {vengHommeyqoqchajDaq};

echo
echo ~~~~~~~~~~~~~~
echo ~~~ VERBS ~~~
echo ~~~~~~~~~~~~~~
echo
echo ~# Basic prefixes #~
echo ~~~~~~~~~~~~~~~~~~
regex "[1P]""[SG]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {jIQong};
regex "[2P]""[SG]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {bIQong};
regex "[3P]""[SG]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {Qong};
regex "[1P]""[PL]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {maQong};
regex "[2P]""[PL]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {SuQong};
regex "[3P]""[PL]"{Qong[to-sleep]}"[V]""[INDICATIVE]" .o. Grammar .o. {Qong};
regex "[1P]""[SG]""[OBJ-2P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {qalegh};
regex "[1P]""[SG]""[OBJ-3P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {vIlegh};
regex "[1P]""[SG]""[OBJ-2P]""[OBJ-PL]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {Salegh};
regex "[2P]""[SG]""[OBJ-3P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {Dalegh};
regex "[2P]""[SG]""[OBJ-3P]""[OBJ-PL]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {Dalegh};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-PL]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {julegh};
regex "[3P]""[SG]""[OBJ-3P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {legh};
regex "[3P]""[PL]""[OBJ-3P]""[OBJ-PL]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {legh};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {cholegh};
regex "[3P]""[SG]""[OBJ-1P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {mulegh};
regex "[2P]""[PL]""[OBJ-1P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {tulegh};
regex "[3P]""[SG]""[OBJ-2P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {Dulegh};
regex "[1P]""[PL]""[OBJ-2P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {pIlegh};
regex "[3P]""[PL]""[OBJ-3P]""[OBJ-SG]"{legh[to-see]}"[V]""[INDICATIVE]" .o. Grammar .o. {lulegh};
echo
echo ~# Imperative #~
echo ~~~~~~~~~~~~~~
regex "[2P]""[SG]"{Qong[to-sleep]}"[V]""[IMPERATIVE]" .o. Grammar .o. {yIQong};
regex "[2P]""[PL]"{Qong[to-sleep]}"[V]""[IMPERATIVE]" .o. Grammar .o. {peQong};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-SG]"{qIp[to-hit]}"[V]""[IMPERATIVE]" .o. Grammar .o. {HIqIp};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-PL]"{qIp[to-hit]}"[V]""[IMPERATIVE]" .o. Grammar .o. {ghoqIp};
regex "[2P]""[SG]""[OBJ-3P]""[OBJ-SG]"{qIp[to-hit]}"[V]""[IMPERATIVE]" .o. Grammar .o. {yIqIp};
regex "[2P]""[SG]""[OBJ-3P]""[OBJ-PL]"{qIp[to-hit]}"[V]""[IMPERATIVE]" .o. Grammar .o. {tIqIp};
echo
echo ~# Suffixes #~
echo ~~~~~~~~~~~~~~
echo
echo Type 1: Oneself/one another
regex "[1P]""[SG]"{qIp[to-hit]}"[REFLEXIVE]""[V]""[INDICATIVE]" .o. Grammar .o. {jIqIp'egh};
regex "[2P]""[SG]"{qIp[to-hit]}"[REFLEXIVE]""[V]""[INDICATIVE]" .o. Grammar .o. {bIqIp'egh};
regex "[3P]""[SG]"{qIp[to-hit]}"[REFLEXIVE]""[V]""[INDICATIVE]" .o. Grammar .o. {qIp'egh};
regex "[2P]""[SG]"{ja'[to-tell,to-report]}"[REFLEXIVE]""[V]""[IMPERATIVE]" .o. Grammar .o. {yIja''egh};
regex "[2P]""[PL]"{ja'[to-tell,to-report]}"[REFLEXIVE]""[V]""[IMPERATIVE]" .o. Grammar .o. {peja''egh};
regex "[1P]""[PL]"{qIp[to-hit]}"[RECIPROCAL]""[V]""[INDICATIVE]" .o. Grammar .o. {maqIpchuq};
regex "[2P]""[PL]"{qIp[to-hit]}"[RECIPROCAL]""[V]""[INDICATIVE]" .o. Grammar .o. {SuqIpchuq};
regex "[3P]""[PL]"{qIp[to-hit]}"[RECIPROCAL]""[V]""[INDICATIVE]" .o. Grammar .o. {qIpchuq};
regex "[2P]""[PL]"{qIp[to-hit]}"[RECIPROCAL]""[V]""[IMPERATIVE]" .o. Grammar .o. {peqIpchuq};
echo
echo Type 2: Volition/predisposition
regex "[1P]""[SG]""[OBJ-3P]""[OBJ-SG]"{legh[to-see]}"[REQUIRED]""[V]""[INDICATIVE]" .o. Grammar .o. {vIleghnIS};
regex "[2P]""[SG]"{Sop[to-eat]}"[REQUIRED]""[V]""[INDICATIVE]" .o. Grammar .o. {bISopnIS};
regex "[3P]""[SG]"{Hegh[to-die]}"[WILLING]""[V]""[INDICATIVE]" .o. Grammar .o. {Heghqang};
regex "[1P]""[SG]""[OBJ-2P]""[OBJ-SG]"{ja'[to-tell,to-report]}"[WILLING]""[V]""[INDICATIVE]" .o. Grammar .o. {qaja'qang};
regex "[3P]""[SG]"{Hegh[to-die]}"[PREPARED]""[V]""[INDICATIVE]" .o. Grammar .o. {Heghrup};
regex "[1P]""[SG]""[OBJ-2P]""[OBJ-SG]"{legh[to-see]}"[PREPARED]""[V]""[INDICATIVE]" .o. Grammar .o. {qaleghrup};
regex "[3P]""[PL]""[OBJ-1P]""[OBJ-PL]"{ja'[to-tell,to-report]}"[PREPARED]""[V]""[INDICATIVE]" .o. Grammar .o. {nuja'rup};
regex "[3P]""[SG]""[OBJ-3P]""[OBJ-SG]"{poj[to-analyze]}"[SET-UP]""[V]""[INDICATIVE]" .o. Grammar .o. {pojbeH};
regex "[3P]""[SG]""[OBJ-3P]""[OBJ-SG]"{lab[to-transmit]}"[SET-UP]""[V]""[INDICATIVE]" .o. Grammar .o. {labbeH};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-SG]"{HoH[to-kill]}"[AFRAID]""[V]""[INDICATIVE]" .o. Grammar .o. {choHoHvIp};
regex "[3P]""[PL]""[OBJ-1P]""[OBJ-SG]"{qIp[to-hit]}"[AFRAID]""[V]""[INDICATIVE]" .o. Grammar .o. {muqIpvIp};
echo
echo Type 3: Change
regex "[1P]""[PL]"{Do'[to-be-fortunate]}"[STATECHANGE]""[V]""[STATIVE]""[INDICATIVE]" .o. Grammar .o. {maDo'choH};
regex "[3P]""[SG]"{ghoS[to-go-onward,to-approach]}"[STATECHANGE]""[V]""[INDICATIVE]" .o. Grammar .o. {ghoSchoH};
regex "[1P]""[SG]""[OBJ-3P]""[OBJ-SG]"{nej[to-look-for,to-seek,to-search-for]}"[RESUME]""[V]""[INDICATIVE]" .o. Grammar .o. {vInejqa'};
echo
echo Type 4: Cause
regex "[1P]""[SG]""[OBJ-3P]""[OBJ-SG]"{chen[to-take-form]}"[CAUSATIVE]""[V]""[INDICATIVE]" .o. Grammar .o. {vIchenmoH};
regex "[2P]""[SG]""[OBJ-1P]""[OBJ-SG]"{Qoy[to-hear]}"[CAUSATIVE]""[V]""[IMPERATIVE]" .o. Grammar .o. {HIQoymoH};

echo
echo ###################
echo FALSE POSITIVE TEST CASES (Success: 1 State)
echo ###################
echo
def NounType1 [{'a'} | {Hom} | {oy}];
def NounType2 [{pu'} | {Du'} | {mey}];
def NounType3 [{qoq} | {Hey} | {na'}];
def NounType4 [{wIj} | {wI'} | {lIj} | {lI'} | {Daj} | {maj} | {ma'} | {raj} | {ra'} | {chaj} | {vam} | {vetlh}];
def NounType5 [{Daq} | {vo'} | {mo'} | {vaD} | {'e'}];
echo Nouns
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType5 NounType1]; ! Type 1 before Type 5
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType5 NounType2]; ! Type 2 before Type 5
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType5 NounType3]; ! Type 3 before Type 5
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType5 NounType4]; ! Type 4 before Type 5
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType5 NounType5]; ! Multiple Type 5
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType4 NounType1]; ! Type 1 before Type 4
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType4 NounType2]; ! Type 2 before Type 4
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType4 NounType3]; ! Type 3 before Type 4
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType4 NounType4]; ! Multiple Type 4
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType3 NounType1]; ! Type 1 before Type 3
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType3 NounType2]; ! Type 2 before Type 3
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType3 NounType3]; ! Multiple Type 3
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType2 NounType1]; ! Type 1 before Type 2
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType2 NounType2]; ! Multiple Type 2
regex ~$["[GUESS]"] .o. Grammar .o. $[NounType1 NounType1]; ! Multiple Type 1

echo
echo -------------------
echo -------------------
echo
echo Re-Loading Grammar...
clear stack
regex Grammar;

echo